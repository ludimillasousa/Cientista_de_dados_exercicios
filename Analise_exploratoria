{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>cor</th>\n",
       "      <th>sexo</th>\n",
       "      <th>horas_por_semana</th>\n",
       "      <th>salario_anual</th>\n",
       "      <th>nome</th>\n",
       "      <th>dívida</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>13</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idade  tempo_educacao        estado_civil    cor    sexo  horas_por_semana  \\\n",
       "0   39.0              13       Never-married  White    Male                40   \n",
       "1   50.0              13  Married-civ-spouse  White    Male                13   \n",
       "2   38.0               9            Divorced  White    Male                40   \n",
       "3   53.0               7  Married-civ-spouse  Black    Male                40   \n",
       "4   37.0              14  Married-civ-spouse  White  Female                40   \n",
       "\n",
       "  salario_anual  nome  dívida  \n",
       "0         <=50K   NaN     NaN  \n",
       "1         <=50K   NaN     NaN  \n",
       "2         <=50K   NaN     NaN  \n",
       "3         <=50K   NaN     NaN  \n",
       "4         <=50K   NaN     NaN  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"dataframe_exercicio_modulo_7.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercícios:\n",
    "\n",
    "<br>\n",
    "\n",
    "1 - Importe o arquivo \"dataframe_exercicio_modulo_7.csv\" em um dataframe - df - do Pandas.\n",
    "\n",
    "<br>\n",
    "\n",
    "2 - Quais as dimensões do dataframe?\n",
    "\n",
    "<br>\n",
    "\n",
    "3 - Qual o tipo das variáveis?\n",
    "\n",
    "<br>\n",
    "\n",
    "4 - Existem variáveis faltantes no dataset? Quais?\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "5 - Exiba todas as categorias das variáveis 'estado_civil', 'cor' e 'sexo'. Você consegue detectar algum problema?\n",
    "\n",
    "<br>\n",
    "\n",
    "6 - Faça um tratamento nas variáveis faltantes.\n",
    "\n",
    "<br>\n",
    "\n",
    "7 - Aplique uma transformação \"MinMax\" na variável  'tempo_educacao'e uma transformação \"StandardScaler\" na variável 'horas_por_semana'.\n",
    "\n",
    "<br>\n",
    "\n",
    "8 - Aplique ohe-hot-encoding nas variáveis 'estado_civil', 'cor' e 'sexo'.\n",
    "\n",
    "<br>\n",
    "\n",
    "9 - Detecte e elimine os outliers da variável 'idade'.\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "10 - Escreva uma função que receba o dataframe em sua forma original e retorne o dataframe modificado, após todas as transformações dos itens acima."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>cor</th>\n",
       "      <th>sexo</th>\n",
       "      <th>horas_por_semana</th>\n",
       "      <th>salario_anual</th>\n",
       "      <th>nome</th>\n",
       "      <th>dívida</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>13</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>52.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>?</td>\n",
       "      <td>45</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>31.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>50</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>42.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>37.0</td>\n",
       "      <td>10</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>80</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>23.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>30</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idade  tempo_educacao        estado_civil    cor    sexo  horas_por_semana  \\\n",
       "0   39.0              13       Never-married  White    Male                40   \n",
       "1   50.0              13  Married-civ-spouse  White    Male                13   \n",
       "2   38.0               9            Divorced  White    Male                40   \n",
       "3   53.0               7  Married-civ-spouse  Black    Male                40   \n",
       "4   37.0              14  Married-civ-spouse  White  Female                40   \n",
       "5   52.0               9  Married-civ-spouse  White       ?                45   \n",
       "6   31.0              14       Never-married  White  Female                50   \n",
       "7   42.0              13  Married-civ-spouse  White    Male                40   \n",
       "8   37.0              10  Married-civ-spouse  Black    Male                80   \n",
       "9   23.0              13       Never-married  White  Female                30   \n",
       "\n",
       "  salario_anual  nome  dívida  \n",
       "0         <=50K   NaN     NaN  \n",
       "1         <=50K   NaN     NaN  \n",
       "2         <=50K   NaN     NaN  \n",
       "3         <=50K   NaN     NaN  \n",
       "4         <=50K   NaN     NaN  \n",
       "5          >50K   NaN     NaN  \n",
       "6          >50K   NaN     NaN  \n",
       "7          >50K   NaN     NaN  \n",
       "8          >50K   NaN     NaN  \n",
       "9         <=50K   NaN     NaN  "
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Questão 1\n",
    "# Importando o dataset (trazendo o arquivo para ser lido)\n",
    "df_1 = pd.read_csv(\"dataframe_exercicio_modulo_7.csv\")\n",
    "df_1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(29170, 9)"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Questão 2 \n",
    "# Tamanho do dataset\n",
    "df_1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 29170 entries, 0 to 29169\n",
      "Data columns (total 9 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   idade             29071 non-null  float64\n",
      " 1   tempo_educacao    29170 non-null  int64  \n",
      " 2   estado_civil      29170 non-null  object \n",
      " 3   cor               29170 non-null  object \n",
      " 4   sexo              29170 non-null  object \n",
      " 5   horas_por_semana  29170 non-null  int64  \n",
      " 6   salario_anual     29170 non-null  object \n",
      " 7   nome              0 non-null      float64\n",
      " 8   dívida            0 non-null      float64\n",
      "dtypes: float64(3), int64(2), object(4)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# Questão 3\n",
    "df_1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "O dataset possui 9 variáveis, onde há variáveis qualitativas e qualitaticas, das quais podemos caracterizar como: \n",
    " \n",
    "Variaveis quanlitativas nominais as colunas: estado_civil, cor, sexo e salario_anual;\n",
    "\n",
    "Variáveis quantitativas discreta as colunas: tempo_educacao e horas por semana;\n",
    "\n",
    "Variáveis quantitativas contínua são: idade, nome e dívida.\n",
    "\n",
    "É importante ressaltar que embora as colunas nome e dívida sejam classificados como variáveis quantitativas, ambas as colunas apresentam valores nulos. E a coluna salario_anual apresentar o intervalo de salários para individuos que ganham ou não mais de $50.000 por ano.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "idade                  99\n",
       "tempo_educacao          0\n",
       "estado_civil            0\n",
       "cor                     0\n",
       "sexo                    0\n",
       "horas_por_semana        0\n",
       "salario_anual           0\n",
       "nome                29170\n",
       "dívida              29170\n",
       "dtype: int64"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Questão 4\n",
    "\n",
    "df_1.isnull().sum()        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Existem. São as colunas: idade, nome e dívida."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Possíveis valores para a variável estado civil: ['Never-married' 'Married-civ-spouse' 'Divorced' 'Separated'\n",
      " 'Married-AF-spouse' 'Widowed' 'Married-spouse-absent']\n",
      "\n",
      "Possíveis valores para a variável cor: ['White' 'Black' 'Other' 'Asian-Pac-Islander' 'Amer-Indian-Eskimo']\n",
      "\n",
      "Possíveis valores para variável Sexo: ['Male' 'Female' '?']\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nPossíveis valores para a variável estado civil:\", df.estado_civil.unique())\n",
    "print(\"\\nPossíveis valores para a variável cor:\", df.cor.unique())\n",
    "print(\"\\nPossíveis valores para variável Sexo:\", df.sexo.unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Tradução das informações do dataset:\n",
    "\n",
    "Coluna estado_civil:\n",
    "never-married = nunca casado;\n",
    "married-civ-spouse = casado com cônjuge civil;\n",
    "divorced = divorciado;\n",
    "separated = separado;\n",
    "married-af-spouse = cônjuge nas forças armadas;\n",
    "widowed = viúva\n",
    "married-spouse-absent = casado com cônjuge ausente.\n",
    "\n",
    "Coluna cor:\n",
    "white = branco;\n",
    "black = negro;\n",
    "other = outro;\n",
    "asian-pac-islander = asiático;\n",
    "amer-indian-eskimo = índio americano.\n",
    "\n",
    "Coluna sexo:\n",
    "male = macho;\n",
    "female = fêmea.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Observa-se que na coluna sexo há valores indefinidos como o \"?\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>cor</th>\n",
       "      <th>sexo</th>\n",
       "      <th>horas_por_semana</th>\n",
       "      <th>salario_anual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>13</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>52.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>?</td>\n",
       "      <td>45</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>31.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>50</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>42.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>37.0</td>\n",
       "      <td>10</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>80</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>23.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>30</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idade  tempo_educacao        estado_civil    cor    sexo  horas_por_semana  \\\n",
       "0   39.0              13       Never-married  White    Male                40   \n",
       "1   50.0              13  Married-civ-spouse  White    Male                13   \n",
       "2   38.0               9            Divorced  White    Male                40   \n",
       "3   53.0               7  Married-civ-spouse  Black    Male                40   \n",
       "4   37.0              14  Married-civ-spouse  White  Female                40   \n",
       "5   52.0               9  Married-civ-spouse  White       ?                45   \n",
       "6   31.0              14       Never-married  White  Female                50   \n",
       "7   42.0              13  Married-civ-spouse  White    Male                40   \n",
       "8   37.0              10  Married-civ-spouse  Black    Male                80   \n",
       "9   23.0              13       Never-married  White  Female                30   \n",
       "\n",
       "  salario_anual  \n",
       "0         <=50K  \n",
       "1         <=50K  \n",
       "2         <=50K  \n",
       "3         <=50K  \n",
       "4         <=50K  \n",
       "5          >50K  \n",
       "6          >50K  \n",
       "7          >50K  \n",
       "8          >50K  \n",
       "9         <=50K  "
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Questão 6\n",
    "\n",
    "# 1º etapa - Como as colunas nome e dívida possuem 100% dos dados faltantes, elas serão deletadas\n",
    "\n",
    "df_1etapa = df_1.copy() \n",
    "df_1etapa = df_1etapa.drop(\"nome\", axis = 1) \n",
    "df_1etapa = df_1etapa.drop(\"dívida\", axis = 1)\n",
    "df_1etapa.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A moda da variável sexo é: Male\n"
     ]
    }
   ],
   "source": [
    "# 2ª etapa - Como a variável sexo é categórica, será calculado a moda para modificação dos valores '?'\n",
    "\n",
    "moda_var_sexo = df_1etapa.sexo.value_counts().idxmax()\n",
    "print( \"A moda da variável sexo é:\", moda_var_sexo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>cor</th>\n",
       "      <th>sexo</th>\n",
       "      <th>horas_por_semana</th>\n",
       "      <th>salario_anual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>13</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>52.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>45</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>31.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>50</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>42.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>37.0</td>\n",
       "      <td>10</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>80</td>\n",
       "      <td>&gt;50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>23.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>30</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   idade  tempo_educacao        estado_civil    cor    sexo  horas_por_semana  \\\n",
       "0   39.0              13       Never-married  White    Male                40   \n",
       "1   50.0              13  Married-civ-spouse  White    Male                13   \n",
       "2   38.0               9            Divorced  White    Male                40   \n",
       "3   53.0               7  Married-civ-spouse  Black    Male                40   \n",
       "4   37.0              14  Married-civ-spouse  White  Female                40   \n",
       "5   52.0               9  Married-civ-spouse  White    Male                45   \n",
       "6   31.0              14       Never-married  White  Female                50   \n",
       "7   42.0              13  Married-civ-spouse  White    Male                40   \n",
       "8   37.0              10  Married-civ-spouse  Black    Male                80   \n",
       "9   23.0              13       Never-married  White  Female                30   \n",
       "\n",
       "  salario_anual  \n",
       "0         <=50K  \n",
       "1         <=50K  \n",
       "2         <=50K  \n",
       "3         <=50K  \n",
       "4         <=50K  \n",
       "5          >50K  \n",
       "6          >50K  \n",
       "7          >50K  \n",
       "8          >50K  \n",
       "9         <=50K  "
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Substituindo o valor \"?\" pelo resultado da moda\n",
    "    \n",
    "df_2etapa = df_1etapa.apply(lambda x: x.replace (\"?\", moda_var_sexo))                          \n",
    "df_2etapa.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Questão 7\n",
    "# 1ª etapa - importando as biliotecas necessárias\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2ª etapa - declarando os objetos\n",
    "limites_scaler = MinMaxScaler()\n",
    "m_desvio_scaler = StandardScaler()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[39.],\n",
       "       [50.],\n",
       "       [38.],\n",
       "       ...,\n",
       "       [58.],\n",
       "       [22.],\n",
       "       [52.]])"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3ª etapa - transformando a variável em um array\n",
    "I = df_2etapa.idade.values.reshape(-1,1)\n",
    "I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MinMaxScaler()"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4ªetapa - Salvando as informações da variável idade (I) nos objetos\n",
    "\n",
    "limites_scaler.fit(I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StandardScaler()"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_desvio_scaler.fit(I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.30136986],\n",
       "       [0.45205479],\n",
       "       [0.28767123],\n",
       "       ...,\n",
       "       [0.56164384],\n",
       "       [0.06849315],\n",
       "       [0.47945205]])"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5ª etapa - Transformando as variáveis de interesse\n",
    "limites_scaler.transform(I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.02521203],\n",
       "       [ 0.82695492],\n",
       "       [-0.04767369],\n",
       "       ...,\n",
       "       [ 1.41004067],\n",
       "       [-1.21384518],\n",
       "       [ 0.97272636]])"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m_desvio_scaler.transform(I)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MinMax</th>\n",
       "      <th>NormPadrao</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.301</td>\n",
       "      <td>0.025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.452</td>\n",
       "      <td>0.827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.288</td>\n",
       "      <td>-0.048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.493</td>\n",
       "      <td>1.046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.274</td>\n",
       "      <td>-0.121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   MinMax  NormPadrao\n",
       "0   0.301       0.025\n",
       "1   0.452       0.827\n",
       "2   0.288      -0.048\n",
       "3   0.493       1.046\n",
       "4   0.274      -0.121"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6ª etapa - Observando os valores em um dataframe\n",
    "dados_normalizados = pd.DataFrame(np.c_[limites_scaler.transform(I), m_desvio_scaler.transform(I)]).round(3)\n",
    "\n",
    "dados_normalizados.rename(columns = {0: 'MinMax', 1:'NormPadrao'}, inplace=True)\n",
    "\n",
    "dados_normalizados.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneHotEncoder()"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Questão 8\n",
    "# 1ª etapa - importando os módulos necessários\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "# 2ª etapa - instanciar em uma variável (no caso, ohe)\n",
    "ohe = OneHotEncoder()\n",
    "\n",
    "# 3ª etapa - transformando em um array\n",
    "estado_civil_ohe = df_2etapa.estado_civil.values.reshape(-1,1)\n",
    "ohe.fit(estado_civil_ohe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 1., 0., 0.],\n",
       "       [0., 0., 1., ..., 0., 0., 0.],\n",
       "       [1., 0., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 1.],\n",
       "       [0., 0., 0., ..., 1., 0., 0.],\n",
       "       [0., 0., 1., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4ª etapa - transformando em matriz\n",
    "ohe.transform(estado_civil_ohe)\n",
    "\n",
    "# 5ª etapa - transformando em array\n",
    "ohe.transform(estado_civil_ohe).toarray()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['Divorced', 'Married-AF-spouse', 'Married-civ-spouse',\n",
       "        'Married-spouse-absent', 'Never-married', 'Separated', 'Widowed'],\n",
       "       dtype=object)]"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6ª etapa - Observando as categorias da variável cor\n",
    "ohe.categories_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Divorced</th>\n",
       "      <th>Married-AF-spouse</th>\n",
       "      <th>Married-civ-spouse</th>\n",
       "      <th>Married-spouse-absent</th>\n",
       "      <th>Never-married</th>\n",
       "      <th>Separated</th>\n",
       "      <th>Widowed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29165</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29166</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29167</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29168</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29169</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29170 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Divorced  Married-AF-spouse  Married-civ-spouse  Married-spouse-absent  \\\n",
       "0           0.0                0.0                 0.0                    0.0   \n",
       "1           0.0                0.0                 1.0                    0.0   \n",
       "2           1.0                0.0                 0.0                    0.0   \n",
       "3           0.0                0.0                 1.0                    0.0   \n",
       "4           0.0                0.0                 1.0                    0.0   \n",
       "...         ...                ...                 ...                    ...   \n",
       "29165       0.0                0.0                 1.0                    0.0   \n",
       "29166       0.0                0.0                 1.0                    0.0   \n",
       "29167       0.0                0.0                 0.0                    0.0   \n",
       "29168       0.0                0.0                 0.0                    0.0   \n",
       "29169       0.0                0.0                 1.0                    0.0   \n",
       "\n",
       "       Never-married  Separated  Widowed  \n",
       "0                1.0        0.0      0.0  \n",
       "1                0.0        0.0      0.0  \n",
       "2                0.0        0.0      0.0  \n",
       "3                0.0        0.0      0.0  \n",
       "4                0.0        0.0      0.0  \n",
       "...              ...        ...      ...  \n",
       "29165            0.0        0.0      0.0  \n",
       "29166            0.0        0.0      0.0  \n",
       "29167            0.0        0.0      1.0  \n",
       "29168            1.0        0.0      0.0  \n",
       "29169            0.0        0.0      0.0  \n",
       "\n",
       "[29170 rows x 7 columns]"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 7ª etapa - Transformando o array em dataframe para melhor visulização dos dadosFazendo os mesmos processos paras as variaveis cor e sexo\n",
    "\n",
    "dataframe_ohe_estado_civil = pd.DataFrame(ohe.transform(estado_civil_ohe).toarray(), \n",
    "                             columns = ohe.categories_[0].tolist())\n",
    "dataframe_ohe_estado_civil"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " [[0. 0. 0. 0. 1.]\n",
      " [0. 0. 0. 0. 1.]\n",
      " [0. 0. 0. 0. 1.]\n",
      " ...\n",
      " [0. 0. 0. 0. 1.]\n",
      " [0. 0. 0. 0. 1.]\n",
      " [0. 0. 0. 0. 1.]]\n",
      "\n",
      " [array(['Amer-Indian-Eskimo', 'Asian-Pac-Islander', 'Black', 'Other',\n",
      "       'White'], dtype=object)]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amer-Indian-Eskimo</th>\n",
       "      <th>Asian-Pac-Islander</th>\n",
       "      <th>Black</th>\n",
       "      <th>Other</th>\n",
       "      <th>White</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29165</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29166</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29167</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29168</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29169</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29170 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Amer-Indian-Eskimo  Asian-Pac-Islander  Black  Other  White\n",
       "0                     0.0                 0.0    0.0    0.0    1.0\n",
       "1                     0.0                 0.0    0.0    0.0    1.0\n",
       "2                     0.0                 0.0    0.0    0.0    1.0\n",
       "3                     0.0                 0.0    1.0    0.0    0.0\n",
       "4                     0.0                 0.0    0.0    0.0    1.0\n",
       "...                   ...                 ...    ...    ...    ...\n",
       "29165                 0.0                 0.0    0.0    0.0    1.0\n",
       "29166                 0.0                 0.0    0.0    0.0    1.0\n",
       "29167                 0.0                 0.0    0.0    0.0    1.0\n",
       "29168                 0.0                 0.0    0.0    0.0    1.0\n",
       "29169                 0.0                 0.0    0.0    0.0    1.0\n",
       "\n",
       "[29170 rows x 5 columns]"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 8ª etapa - Fazendo os mesmos processos paras as variaveis cor e sexo\n",
    "#8.1. Variável cor:\n",
    "cor_ohe = df_2etapa.cor.values.reshape(-1,1)\n",
    "ohe.fit(cor_ohe)\n",
    "\n",
    "ohe.transform(cor_ohe)\n",
    "print(\"\\n\",ohe.transform(cor_ohe).toarray())\n",
    "\n",
    "print(\"\\n\",ohe.categories_)\n",
    "dataframe_ohe_cor = pd.DataFrame(ohe.transform(cor_ohe).toarray(), \n",
    "                             columns = ohe.categories_[0].tolist())\n",
    "dataframe_ohe_cor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " [[0. 1.]\n",
      " [0. 1.]\n",
      " [0. 1.]\n",
      " ...\n",
      " [1. 0.]\n",
      " [0. 1.]\n",
      " [1. 0.]]\n",
      "\n",
      " [array(['Female', 'Male'], dtype=object)]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29165</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29166</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29167</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29168</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29169</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29170 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Female  Male\n",
       "0         0.0   1.0\n",
       "1         0.0   1.0\n",
       "2         0.0   1.0\n",
       "3         0.0   1.0\n",
       "4         1.0   0.0\n",
       "...       ...   ...\n",
       "29165     1.0   0.0\n",
       "29166     0.0   1.0\n",
       "29167     1.0   0.0\n",
       "29168     0.0   1.0\n",
       "29169     1.0   0.0\n",
       "\n",
       "[29170 rows x 2 columns]"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#8.1. Variável sexo:\n",
    "sexo_ohe = df_2etapa.sexo.values.reshape(-1,1)\n",
    "ohe.fit(sexo_ohe)\n",
    "\n",
    "ohe.transform(sexo_ohe)\n",
    "print(\"\\n\", ohe.transform(sexo_ohe).toarray())\n",
    "\n",
    "print(\"\\n\",ohe.categories_)\n",
    "dataframe_ohe_sexo = pd.DataFrame(ohe.transform(sexo_ohe).toarray(), \n",
    "                             columns = ohe.categories_[0].tolist())\n",
    "dataframe_ohe_sexo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Questão 9 \n",
    "# 1ª etapa - importando as biliotecas necessárias\n",
    "import matplotlib.pyplot as plt \n",
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "idade               99\n",
       "tempo_educacao       0\n",
       "estado_civil         0\n",
       "cor                  0\n",
       "sexo                 0\n",
       "horas_por_semana     0\n",
       "salario_anual        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2ª etapa - Conhecendo a quantidade de registros faltantes para a variável idade\n",
    "df_2etapa.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "116     NaN\n",
       "523     NaN\n",
       "733     NaN\n",
       "771     NaN\n",
       "985     NaN\n",
       "         ..\n",
       "27743   NaN\n",
       "27778   NaN\n",
       "27878   NaN\n",
       "27883   NaN\n",
       "28326   NaN\n",
       "Name: idade, Length: 99, dtype: float64"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 3ª etapa - reconhecendo as linhas que apresentam valores NaN \n",
    "df_2etapa.idade.loc[np.isnan(df_2etapa.idade)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>idade2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>39.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>53.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>37.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>46.0</td>\n",
       "      <td>46.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>NaN</td>\n",
       "      <td>38.654088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>27.0</td>\n",
       "      <td>27.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>20.0</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>49.0</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     idade     idade2\n",
       "0     39.0  39.000000\n",
       "1     50.0  50.000000\n",
       "2     38.0  38.000000\n",
       "3     53.0  53.000000\n",
       "4     37.0  37.000000\n",
       "..     ...        ...\n",
       "115   46.0  46.000000\n",
       "116    NaN  38.654088\n",
       "117   27.0  27.000000\n",
       "118   20.0  20.000000\n",
       "119   49.0  49.000000\n",
       "\n",
       "[120 rows x 2 columns]"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 4ª etapa - preenchendo registros faltantes com o valor da média\n",
    "idade_preenchida = SimpleImputer(missing_values = np.nan, strategy = \"mean\")\n",
    "df_2etapa['idade2'] = idade_preenchida.fit_transform(df_2etapa[['idade']])\n",
    "df_2etapa [[\"idade\", 'idade2']].head(120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAEICAYAAABGaK+TAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAStUlEQVR4nO3df5Bd5X3f8fcHhKJgbPSDFVkjQA3ROBiKsL3jOnXqDFGoSeIE6g6tOyUWCSkJ4wbcZtqhGc8Yj+MpnWGa2spMUiV2kGOMQ2xclGSGiWZV3LoxtItNHWQ5o8QFjKVICyxgcDAgvv3jHtkXsWLvSnv36tG+XzN3nnOec8493wvDh2efe849qSokSe05adQFSJKOjgEuSY0ywCWpUQa4JDXKAJekRhngktQoA1wnlCSV5EdGXQdAknuS/PJRHntrkt9c6Jp0YjHANRRJHkryd0meSTKT5M+SnD3qug5JcnWSLx7je9yU5FMLVZM0Xwa4hunnquo0YBzYD2wZcT3SCcUA19BV1XPAZ4E3HupLcnqSTyaZTvJwkg8kOSnJ6iSPJvm5br/Tkvx1kvd267cm+d0kO5J8O8kXkpw723lf5RznA78L/Fj3F8KTC/E5k1ya5OtJnkry20D6tp2XZGeSx5M8luS2JCv7tr8pyZe7z/RHwIrD3vtdSR5I8mSSv0hy0ULUrLYZ4Bq6JKcC/xy4t697C3A68MPATwDvBX6xqp4Afgn4vSRrgd8CHqiqT/Yd+y+BDwNnAA8Atx3h1Ec6x27gV4EvVdVpVbVyAT7jGcDngA90df0N8Pb+XYD/CLweOB84G7ipO3Y58N+APwRWA38M/NO+934z8AngV4A1wH8Ftif5gWOtW42rKl++FvwFPAQ8AzwJvAjsBf5+t+1k4LvAG/v2/xXgnr71LcBfdset6eu/FfhM3/ppwEHg7G69gB+Z6xzA1cAXj/Ez3gR8qlt+L3Bv37YAjwK/fIRjrwC+0i2/o/uc6dv+F8Bvdsu/A3z4sOP/CviJUf979jXalyNwDdMV1Rvd/gDwr4EvJPkheiPU5cDDffs+DJzVt74VuBD4g6p6/LD3/eahhap6BniC3si23yDnOKIk/6ibXnkmya4BDnn9YXVV/3qStUk+k+RbSZ4GPtXVeOjYb3XH9Nd6yLnAr3fTJ092Uz5n88rPrCXGANfQVdXBqrqT3kj5x4HHgBfoBdMh5wDfAkhyMr1pgk8C181yWeD3rmZJchq9aYe9h+3zquegN1J/tZr/Z/WmV06rqgvm/JCw77C60r9Ob/qkgIuq6nXAVXx/jnwfcFZ3TH+th3wT+EhVrex7nVpVtw9Ql05gBriGLj2XA6uA3VV1ELgD+EiS13ZfQv5beqNSgN/o2l8CbgE+2YX6IT+T5Me7ueMPA/dV1Tf7tjPAOfYD67r3WAh/BlyQ5N1JlgHXAz/Ut/21dFNKSc4C/l3fti/Rm2a6PsmyJO8G3tq3/feAX03yD7p/lq9J8rNJXrtAtatRBriG6U+SPAM8DXwE2FxVh6Yjfg14FvgG8EXg08AnkryFXtC+twvh/0Rv5Hpj3/t+GvggvamTt9D7UnM2s56j27YT2AX8bZLHjvWDVtVjwJXAzcDjwAbgf/Xt8iHgzcBT9ML+zr5jnwfeTW9efobeF77926eAfwX8drf9r7t9tcTl5dNu0vEtya3Ao1X1gVHXIo2aI3BJapQBLkmNcgpFkhrlCFySGrVsMU92xhln1Pr16xfzlJLUvPvvv/+xqho7vH9RA3z9+vVMTU0t5iklqXlJHp6t3ykUSWqUAS5JjTLAJalRBrgkNcoAl6RGDRTgSW5I8mCSXUne3/Wt7h5rtadrVw21UmkIkrziJbVizgBPciG9X0J7K7AReFeSDfR+HW6yqjYAk7z81+Kk415/WF9//fWz9kvHs0FG4OfTe1TUd6rqReALwD8BLge2dftso/eIKKk5VcVHP/pR/FkJtWaQAH8QeEeSNd3DaX+G3pNGzqyqfQBdu3a2g5Ncm2QqydT09PRC1S0tiP6R92zr0vFsoB+zSnIN8D56TxT5GvB39J7uvbJvn5mqetV58ImJifJOTB0vDk2V9P83MFufNGpJ7q+qicP7B/oSs6o+XlVvrqp30HsKyh5gf5Lx7s3HgQMLWbC0WJJwww03OPet5gx6Fcrarj2H3qOfbge2A5u7XTYDdw2jQGlY+kfZH/vYx2btl45ng14H/rkkXwP+BHhfVc3Qe/bfpUn2AJd261Iz3vnOdwJw3XXX8eSTT3Lddde9rF863i3qAx2cA9fx5KSTTmLTpk3s27eP3bt3c/755zM+Ps7k5CQvvfTSqMuTvueY5sClE1FVsWfPHrZs2cJzzz3Hli1b2LNnj1MoaoYBriVt48aNXHLJJZxyyilccsklbNy4cdQlSQNb1Ac6SMeb7du3s3r1ap566ilOP/10ZmZmRl2SNDBH4Fqy1q1bx/Lly5mZmeGll15iZmaG5cuXs27dulGXJg3EANeStmbNGnbu3Mnzzz/Pzp07WbNmzahLkgZmgGvJ2rt3LxdccAGbNm1i+fLlbNq0iQsuuIC9e/eOujRpIAa4lqyVK1eyc+dObrnlFp599lluueUWdu7cycqVK0ddmjQQrwPXknXKKafw4osvvqJ/2bJlvPDCCyOoSJqd14FLhzkU3ieddNLL2tlCXToeGeBa0lasWMHBgwepKg4ePMiKFStGXZI0MK8D15L23HPP+SuEapYjcElqlAGuJW/VqlV89atfZdUqn8uttjiFoiVvZmaGiy66aNRlSPPmCFxL3ooVK7j33nv9AlPNMcC15J133nmMj49z3nnnjboUaV6cQtGSt2vXLs4999xRlyHNmyNwLXlJuPvuu72cUM0Z9KHG/ybJriQPJrk9yYokq5PsSLKna/0KX02qKi677DKfxKPmzBngSc4CrgcmqupC4GTgPcCNwGRVbQAmu3VJ0iIZdAplGfCDSZYBpwJ7gcuBbd32bcAVC16dtAiq6nsvqSVzBnhVfQu4BXgE2Ac8VVV/DpxZVfu6ffYBa2c7Psm1SaaSTE1PTy9c5dICSfK9l9SSQaZQVtEbbf894PXAa5JcNegJqmprVU1U1cTY2NjRVypJeplBplB+Cvh/VTVdVS8AdwL/ENifZBygaw8Mr0xpuG699dZRlyDN2yAB/gjwtiSnpvc35iZgN7Ad2Nztsxm4azglSsN39dVXj7oEad7mvJGnqu5L8lngy8CLwFeArcBpwB1JrqEX8lcOs1BpWPq/vHQeXC0Z6CqUqvpgVf1oVV1YVb9QVd+tqseralNVbejaJ4ZdrDQMSbjtttsMbzXHW+l1QppvGF911cu/lx/0eC891CgZ4DohzTdYkxjGao6/hSJJjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJatScAZ7kDUke6Hs9neT9SVYn2ZFkT9euWoyCJUk9cwZ4Vf1VVV1cVRcDbwG+A3weuBGYrKoNwGS3LklaJPOdQtkE/E1VPQxcDmzr+rcBVyxgXZKkOcw3wN8D3N4tn1lV+wC6du1sByS5NslUkqnp6emjr1SS9DIDB3iS5cDPA388nxNU1daqmqiqibGxsfnWJ0k6gvmMwH8a+HJV7e/W9ycZB+jaAwtdnCTpyOYT4P+C70+fAGwHNnfLm4G7FqooSdLcBgrwJKcClwJ39nXfDFyaZE+37eaFL0+SdCTLBtmpqr4DrDms73F6V6VIkkbAOzElqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDVq0Gdirkzy2SRfT7I7yY8lWZ1kR5I9Xbtq2MVKkr5v0BH4R4G7q+pHgY3AbuBGYLKqNgCT3bokaZHMGeBJXge8A/g4QFU9X1VPApcD27rdtgFXDKdESdJsBhmB/zAwDfxBkq8k+f0krwHOrKp9AF27draDk1ybZCrJ1PT09IIVLklL3SABvgx4M/A7VfUm4FnmMV1SVVuraqKqJsbGxo6yTEnS4QYJ8EeBR6vqvm79s/QCfX+ScYCuPTCcEiVJs5kzwKvqb4FvJnlD17UJ+BqwHdjc9W0G7hpKhZKkWS0bcL9fA25Lshz4BvCL9ML/jiTXAI8AVw6nREnSbAYK8Kp6AJiYZdOmBa1GkjQw78SUpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktSogR6pluQh4NvAQeDFqppIshr4I2A98BDwz6pqZjhlSpION58R+CVVdXFVHXo25o3AZFVtACa7dUnSIjmWKZTLgW3d8jbgimOuRpI0sEEDvIA/T3J/kmu7vjOrah9A164dRoGSpNkNNAcOvL2q9iZZC+xI8vVBT9AF/rUA55xzzlGUKEmazUAj8Kra27UHgM8DbwX2JxkH6NoDRzh2a1VNVNXE2NjYwlQtSZo7wJO8JslrDy0D/xh4ENgObO522wzcNawiJUmvNMgUypnA55Mc2v/TVXV3kv8D3JHkGuAR4MrhlSlJOtycAV5V3wA2ztL/OLBpGEVJkuY26JeY0sisXr2amZnh3yPW/ZU5NKtWreKJJ54Y6jm0tBjgOu7NzMxQVaMu45gN+38QWnr8LRRJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaZYBLUqMGDvAkJyf5SpI/7dZXJ9mRZE/XrhpemZKkw81nBH4DsLtv/UZgsqo2AJPduiRpkQwU4EnWAT8L/H5f9+XAtm55G3DFglYmSXpVg47A/wvw74GX+vrOrKp9AF27dmFLkyS9mjkDPMm7gANVdf/RnCDJtUmmkkxNT08fzVtIkmYxyAj87cDPJ3kI+Azwk0k+BexPMg7QtQdmO7iqtlbVRFVNjI2NLVDZkqQ5A7yq/kNVrauq9cB7gJ1VdRWwHdjc7bYZuGtoVUqSXuFYrgO/Gbg0yR7g0m5dkrRIls1n56q6B7inW34c2LTwJUmSBuGdmJLUKANckhplgEtSo+Y1By6NQn3wdXDT6aMu45jVB1836hJ0gjHAddzLh56mqkZdxjFLQt006ip0InEKRZIaZYBLUqMMcElqlAEuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1as4AT7Iiyf9O8n+T7Eryoa5/dZIdSfZ07arhlytJOmSQEfh3gZ+sqo3AxcBlSd4G3AhMVtUGYLJblyQtkjkDvHqe6VZP6V4FXA5s6/q3AVcMo0BJ0uwGmgNPcnKSB4ADwI6qug84s6r2AXTt2iMce22SqSRT09PTC1S2JGmgAK+qg1V1MbAOeGuSCwc9QVVtraqJqpoYGxs7yjIlSYeb11UoVfUkcA9wGbA/yThA1x5Y6OIkSUc2yFUoY0lWdss/CPwU8HVgO7C5220zcNeQapQkzWKQp9KPA9uSnEwv8O+oqj9N8iXgjiTXAI8AVw6xTknSYeYM8Kr6KvCmWfofBzYNoyjpcElGXcIxW7XKWyW0sAYZgUsjVVVDP0eSRTmPtJC8lV6SGmWAS1KjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhplgEtSowxwSWqUAS5JjTLAJalRBrgkNcoAl6RGGeCS1CgDXJIaNchDjc9O8t+T7E6yK8kNXf/qJDuS7OlanxclSYtokBH4i8CvV9X5wNuA9yV5I3AjMFlVG4DJbl2StEjmDPCq2ldVX+6Wvw3sBs4CLge2dbttA64YUo2SpFnMaw48yXp6T6i/DzizqvZBL+SBtUc45tokU0mmpqenj7FcSdIhAwd4ktOAzwHvr6qnBz2uqrZW1URVTYyNjR1NjZKkWQwU4ElOoRfet1XVnV33/iTj3fZx4MBwSpQkzWaQq1ACfBzYXVX/uW/TdmBzt7wZuGvhy5MkHcmyAfZ5O/ALwF8meaDr+w3gZuCOJNcAjwBXDqVCSdKs5gzwqvoikCNs3rSw5UiSBuWdmJLUKANckho1yBy41Jzed+/DP6aq5n2MtFAMcJ2QDFYtBU6hSFKjDHBJapQBLkmNMsAlqVEGuCQ1ygCXpEYZ4JLUKANckhqVxbzhIck08PCinVAa3BnAY6MuQjqCc6vqFU/EWdQAl45XSaaqamLUdUjz4RSKJDXKAJekRhngUs/WURcgzZdz4JLUKEfgktQoA1ySGmWAa0lL8okkB5I8OOpapPkywLXU3QpcNuoipKNhgGtJq6r/ATwx6jqko2GAS1KjDHBJapQBLkmNMsAlqVEGuJa0JLcDXwLekOTRJNeMuiZpUN5KL0mNcgQuSY0ywCWpUQa4JDXKAJekRhngktQoA1ySGmWAS1Kj/j8k/8oAqaOWSwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 5ª etapa - visualizando a presença de outliers no boxplot\n",
    "\n",
    "plt.boxplot(df_2etapa.idade2)\n",
    "plt.title ('Boxplot - Idade')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentil 25th = 28.0\n",
      "\n",
      "Percentil 75th = 48.0\n",
      "\n",
      "Interquartil = 20.0\n"
     ]
    }
   ],
   "source": [
    "# 6ª etapa - calculando o intervalo interquartil\n",
    "\n",
    "q25 = np.percentile(df_2etapa.idade2, 25)\n",
    "q75 = np.percentile(df_2etapa.idade2,75)\n",
    "iqr = q75 - q25\n",
    "print (\"Percentil 25th =\",q25)\n",
    "print (\"\\nPercentil 75th =\",q75)\n",
    "print (\"\\nInterquartil =\", iqr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Limite inferior: 17.0\n",
      "\n",
      " Limite superior: 78.0\n"
     ]
    }
   ],
   "source": [
    "# 7ª etapa - Calculando os limites\n",
    "\n",
    "limite_inferior = np.maximum((q25) - 1.5*iqr, np.min(df_2etapa.idade2))\n",
    "print(\"\\n Limite inferior:\", limite_inferior)\n",
    "\n",
    "limite_superior = np.minimum((q75) + 1.5*iqr, np.max(df_2etapa.idade2))\n",
    "print(\"\\n Limite superior:\", limite_superior)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8ª etapa - Removendo outliers\n",
    "idade_semoutliers = [x for x in df_2etapa.idade2 if (x >= limite_inferior) & (x <= limite_superior)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 9ª etapa - verificando a funcionalidade visualizando ausência de outliers no boxplot\n",
    "plt.boxplot(idade_semoutliers)\n",
    "plt.title ('Boxplot sem outliers - Idade')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Questão 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [],
   "source": [
    "def limpeza_e_tratamento(df, cols_numericas):\n",
    "    dff = df.copy()\n",
    "    \n",
    "    temp = (df.isnull().sum() / df.shape[0]) >= 0.8\n",
    "    variaveis_80percFaltantes = temp.loc[temp == True].index.tolist()\n",
    "    for v in variaveis_80percFaltantes:\n",
    "        dff = dff.drop(v, axis = 1)\n",
    "        \n",
    "    cols_numericas = list(set(cols_numericas).intersection(set(dff.columns.tolist())))\n",
    "    for v in cols_numericas:\n",
    "        dff[v] = dff[v].fillna(dff[v].mean())\n",
    "        \n",
    "    q25 = np.percentile(dff[v], 25)\n",
    "    q75 = np.percentile(dff[v],75)\n",
    "    iqr = q75 - q25\n",
    "    \n",
    "    limite_inferior = np.maximum((q25) - 1.5*iqr, np.min(dff[v]))\n",
    "    limite_superior = np.minimum((q75) + 1.5*iqr, np.max(dff[v]))\n",
    "            \n",
    "    return np.where((dff[v] < limite_inferior) | (dff[v] > limite_superior), 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>cor</th>\n",
       "      <th>sexo</th>\n",
       "      <th>horas_por_semana</th>\n",
       "      <th>salario_anual</th>\n",
       "      <th>nome</th>\n",
       "      <th>dívida</th>\n",
       "      <th>outlier_idade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>39.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>13</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>53.0</td>\n",
       "      <td>7</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Black</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.0</td>\n",
       "      <td>14</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29165</th>\n",
       "      <td>27.0</td>\n",
       "      <td>12</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>38</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29166</th>\n",
       "      <td>40.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>40</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29167</th>\n",
       "      <td>58.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Widowed</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29168</th>\n",
       "      <td>22.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>20</td>\n",
       "      <td>&lt;=50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29169</th>\n",
       "      <td>52.0</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>40</td>\n",
       "      <td>&gt;50K</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>29170 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       idade  tempo_educacao        estado_civil    cor    sexo  \\\n",
       "0       39.0              13       Never-married  White    Male   \n",
       "1       50.0              13  Married-civ-spouse  White    Male   \n",
       "2       38.0               9            Divorced  White    Male   \n",
       "3       53.0               7  Married-civ-spouse  Black    Male   \n",
       "4       37.0              14  Married-civ-spouse  White  Female   \n",
       "...      ...             ...                 ...    ...     ...   \n",
       "29165   27.0              12  Married-civ-spouse  White  Female   \n",
       "29166   40.0               9  Married-civ-spouse  White    Male   \n",
       "29167   58.0               9             Widowed  White  Female   \n",
       "29168   22.0               9       Never-married  White    Male   \n",
       "29169   52.0               9  Married-civ-spouse  White  Female   \n",
       "\n",
       "       horas_por_semana salario_anual  nome  dívida  outlier_idade  \n",
       "0                    40         <=50K   NaN     NaN              0  \n",
       "1                    13         <=50K   NaN     NaN              0  \n",
       "2                    40         <=50K   NaN     NaN              0  \n",
       "3                    40         <=50K   NaN     NaN              0  \n",
       "4                    40         <=50K   NaN     NaN              0  \n",
       "...                 ...           ...   ...     ...            ...  \n",
       "29165                38         <=50K   NaN     NaN              0  \n",
       "29166                40          >50K   NaN     NaN              0  \n",
       "29167                40         <=50K   NaN     NaN              0  \n",
       "29168                20         <=50K   NaN     NaN              0  \n",
       "29169                40          >50K   NaN     NaN              0  \n",
       "\n",
       "[29170 rows x 10 columns]"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1['outlier_idade'] = limpeza_e_tratamento(df =df_1, cols_numericas = ['idade'])\n",
    "df_1"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
