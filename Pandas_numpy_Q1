{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Considere os arrays numpy X, y abaixo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "\n",
    "X = load_iris().data\n",
    "y = load_iris().target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.1, 3.5, 1.4, 0.2],\n",
       "       [4.9, 3. , 1.4, 0.2],\n",
       "       [4.7, 3.2, 1.3, 0.2],\n",
       "       [4.6, 3.1, 1.5, 0.2],\n",
       "       [5. , 3.6, 1.4, 0.2],\n",
       "       [5.4, 3.9, 1.7, 0.4],\n",
       "       [4.6, 3.4, 1.4, 0.3],\n",
       "       [5. , 3.4, 1.5, 0.2],\n",
       "       [4.4, 2.9, 1.4, 0.2],\n",
       "       [4.9, 3.1, 1.5, 0.1]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 1:__ Crie um dataframe df do pandas a partir de X, y.\n",
    "\n",
    "Primeiro, concatene os arrays numpy. Na sequência transforme o array final para um dataframe. Altere o nome das colunas para 'X1', 'X2', 'X3', 'X4' e 'target'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150, 4)\n"
     ]
    }
   ],
   "source": [
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150,)\n"
     ]
    }
   ],
   "source": [
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.1 3.5 1.4 0.2 0. ]\n",
      " [4.9 3.  1.4 0.2 0. ]\n",
      " [4.7 3.2 1.3 0.2 0. ]\n",
      " [4.6 3.1 1.5 0.2 0. ]\n",
      " [5.  3.6 1.4 0.2 0. ]\n",
      " [5.4 3.9 1.7 0.4 0. ]\n",
      " [4.6 3.4 1.4 0.3 0. ]\n",
      " [5.  3.4 1.5 0.2 0. ]\n",
      " [4.4 2.9 1.4 0.2 0. ]\n",
      " [4.9 3.1 1.5 0.1 0. ]\n",
      " [5.4 3.7 1.5 0.2 0. ]\n",
      " [4.8 3.4 1.6 0.2 0. ]\n",
      " [4.8 3.  1.4 0.1 0. ]\n",
      " [4.3 3.  1.1 0.1 0. ]\n",
      " [5.8 4.  1.2 0.2 0. ]\n",
      " [5.7 4.4 1.5 0.4 0. ]\n",
      " [5.4 3.9 1.3 0.4 0. ]\n",
      " [5.1 3.5 1.4 0.3 0. ]\n",
      " [5.7 3.8 1.7 0.3 0. ]\n",
      " [5.1 3.8 1.5 0.3 0. ]\n",
      " [5.4 3.4 1.7 0.2 0. ]\n",
      " [5.1 3.7 1.5 0.4 0. ]\n",
      " [4.6 3.6 1.  0.2 0. ]\n",
      " [5.1 3.3 1.7 0.5 0. ]\n",
      " [4.8 3.4 1.9 0.2 0. ]\n",
      " [5.  3.  1.6 0.2 0. ]\n",
      " [5.  3.4 1.6 0.4 0. ]\n",
      " [5.2 3.5 1.5 0.2 0. ]\n",
      " [5.2 3.4 1.4 0.2 0. ]\n",
      " [4.7 3.2 1.6 0.2 0. ]\n",
      " [4.8 3.1 1.6 0.2 0. ]\n",
      " [5.4 3.4 1.5 0.4 0. ]\n",
      " [5.2 4.1 1.5 0.1 0. ]\n",
      " [5.5 4.2 1.4 0.2 0. ]\n",
      " [4.9 3.1 1.5 0.2 0. ]\n",
      " [5.  3.2 1.2 0.2 0. ]\n",
      " [5.5 3.5 1.3 0.2 0. ]\n",
      " [4.9 3.6 1.4 0.1 0. ]\n",
      " [4.4 3.  1.3 0.2 0. ]\n",
      " [5.1 3.4 1.5 0.2 0. ]\n",
      " [5.  3.5 1.3 0.3 0. ]\n",
      " [4.5 2.3 1.3 0.3 0. ]\n",
      " [4.4 3.2 1.3 0.2 0. ]\n",
      " [5.  3.5 1.6 0.6 0. ]\n",
      " [5.1 3.8 1.9 0.4 0. ]\n",
      " [4.8 3.  1.4 0.3 0. ]\n",
      " [5.1 3.8 1.6 0.2 0. ]\n",
      " [4.6 3.2 1.4 0.2 0. ]\n",
      " [5.3 3.7 1.5 0.2 0. ]\n",
      " [5.  3.3 1.4 0.2 0. ]\n",
      " [7.  3.2 4.7 1.4 1. ]\n",
      " [6.4 3.2 4.5 1.5 1. ]\n",
      " [6.9 3.1 4.9 1.5 1. ]\n",
      " [5.5 2.3 4.  1.3 1. ]\n",
      " [6.5 2.8 4.6 1.5 1. ]\n",
      " [5.7 2.8 4.5 1.3 1. ]\n",
      " [6.3 3.3 4.7 1.6 1. ]\n",
      " [4.9 2.4 3.3 1.  1. ]\n",
      " [6.6 2.9 4.6 1.3 1. ]\n",
      " [5.2 2.7 3.9 1.4 1. ]\n",
      " [5.  2.  3.5 1.  1. ]\n",
      " [5.9 3.  4.2 1.5 1. ]\n",
      " [6.  2.2 4.  1.  1. ]\n",
      " [6.1 2.9 4.7 1.4 1. ]\n",
      " [5.6 2.9 3.6 1.3 1. ]\n",
      " [6.7 3.1 4.4 1.4 1. ]\n",
      " [5.6 3.  4.5 1.5 1. ]\n",
      " [5.8 2.7 4.1 1.  1. ]\n",
      " [6.2 2.2 4.5 1.5 1. ]\n",
      " [5.6 2.5 3.9 1.1 1. ]\n",
      " [5.9 3.2 4.8 1.8 1. ]\n",
      " [6.1 2.8 4.  1.3 1. ]\n",
      " [6.3 2.5 4.9 1.5 1. ]\n",
      " [6.1 2.8 4.7 1.2 1. ]\n",
      " [6.4 2.9 4.3 1.3 1. ]\n",
      " [6.6 3.  4.4 1.4 1. ]\n",
      " [6.8 2.8 4.8 1.4 1. ]\n",
      " [6.7 3.  5.  1.7 1. ]\n",
      " [6.  2.9 4.5 1.5 1. ]\n",
      " [5.7 2.6 3.5 1.  1. ]\n",
      " [5.5 2.4 3.8 1.1 1. ]\n",
      " [5.5 2.4 3.7 1.  1. ]\n",
      " [5.8 2.7 3.9 1.2 1. ]\n",
      " [6.  2.7 5.1 1.6 1. ]\n",
      " [5.4 3.  4.5 1.5 1. ]\n",
      " [6.  3.4 4.5 1.6 1. ]\n",
      " [6.7 3.1 4.7 1.5 1. ]\n",
      " [6.3 2.3 4.4 1.3 1. ]\n",
      " [5.6 3.  4.1 1.3 1. ]\n",
      " [5.5 2.5 4.  1.3 1. ]\n",
      " [5.5 2.6 4.4 1.2 1. ]\n",
      " [6.1 3.  4.6 1.4 1. ]\n",
      " [5.8 2.6 4.  1.2 1. ]\n",
      " [5.  2.3 3.3 1.  1. ]\n",
      " [5.6 2.7 4.2 1.3 1. ]\n",
      " [5.7 3.  4.2 1.2 1. ]\n",
      " [5.7 2.9 4.2 1.3 1. ]\n",
      " [6.2 2.9 4.3 1.3 1. ]\n",
      " [5.1 2.5 3.  1.1 1. ]\n",
      " [5.7 2.8 4.1 1.3 1. ]\n",
      " [6.3 3.3 6.  2.5 2. ]\n",
      " [5.8 2.7 5.1 1.9 2. ]\n",
      " [7.1 3.  5.9 2.1 2. ]\n",
      " [6.3 2.9 5.6 1.8 2. ]\n",
      " [6.5 3.  5.8 2.2 2. ]\n",
      " [7.6 3.  6.6 2.1 2. ]\n",
      " [4.9 2.5 4.5 1.7 2. ]\n",
      " [7.3 2.9 6.3 1.8 2. ]\n",
      " [6.7 2.5 5.8 1.8 2. ]\n",
      " [7.2 3.6 6.1 2.5 2. ]\n",
      " [6.5 3.2 5.1 2.  2. ]\n",
      " [6.4 2.7 5.3 1.9 2. ]\n",
      " [6.8 3.  5.5 2.1 2. ]\n",
      " [5.7 2.5 5.  2.  2. ]\n",
      " [5.8 2.8 5.1 2.4 2. ]\n",
      " [6.4 3.2 5.3 2.3 2. ]\n",
      " [6.5 3.  5.5 1.8 2. ]\n",
      " [7.7 3.8 6.7 2.2 2. ]\n",
      " [7.7 2.6 6.9 2.3 2. ]\n",
      " [6.  2.2 5.  1.5 2. ]\n",
      " [6.9 3.2 5.7 2.3 2. ]\n",
      " [5.6 2.8 4.9 2.  2. ]\n",
      " [7.7 2.8 6.7 2.  2. ]\n",
      " [6.3 2.7 4.9 1.8 2. ]\n",
      " [6.7 3.3 5.7 2.1 2. ]\n",
      " [7.2 3.2 6.  1.8 2. ]\n",
      " [6.2 2.8 4.8 1.8 2. ]\n",
      " [6.1 3.  4.9 1.8 2. ]\n",
      " [6.4 2.8 5.6 2.1 2. ]\n",
      " [7.2 3.  5.8 1.6 2. ]\n",
      " [7.4 2.8 6.1 1.9 2. ]\n",
      " [7.9 3.8 6.4 2.  2. ]\n",
      " [6.4 2.8 5.6 2.2 2. ]\n",
      " [6.3 2.8 5.1 1.5 2. ]\n",
      " [6.1 2.6 5.6 1.4 2. ]\n",
      " [7.7 3.  6.1 2.3 2. ]\n",
      " [6.3 3.4 5.6 2.4 2. ]\n",
      " [6.4 3.1 5.5 1.8 2. ]\n",
      " [6.  3.  4.8 1.8 2. ]\n",
      " [6.9 3.1 5.4 2.1 2. ]\n",
      " [6.7 3.1 5.6 2.4 2. ]\n",
      " [6.9 3.1 5.1 2.3 2. ]\n",
      " [5.8 2.7 5.1 1.9 2. ]\n",
      " [6.8 3.2 5.9 2.3 2. ]\n",
      " [6.7 3.3 5.7 2.5 2. ]\n",
      " [6.7 3.  5.2 2.3 2. ]\n",
      " [6.3 2.5 5.  1.9 2. ]\n",
      " [6.5 3.  5.2 2.  2. ]\n",
      " [6.2 3.4 5.4 2.3 2. ]\n",
      " [5.9 3.  5.1 1.8 2. ]]\n"
     ]
    }
   ],
   "source": [
    "array_final = np.c_[X,y]\n",
    "print(array_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(150, 5)\n"
     ]
    }
   ],
   "source": [
    "print(array_final.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       0    1    2    3    4\n",
      "0    5.1  3.5  1.4  0.2  0.0\n",
      "1    4.9  3.0  1.4  0.2  0.0\n",
      "2    4.7  3.2  1.3  0.2  0.0\n",
      "3    4.6  3.1  1.5  0.2  0.0\n",
      "4    5.0  3.6  1.4  0.2  0.0\n",
      "..   ...  ...  ...  ...  ...\n",
      "145  6.7  3.0  5.2  2.3  2.0\n",
      "146  6.3  2.5  5.0  1.9  2.0\n",
      "147  6.5  3.0  5.2  2.0  2.0\n",
      "148  6.2  3.4  5.4  2.3  2.0\n",
      "149  5.9  3.0  5.1  1.8  2.0\n",
      "\n",
      "[150 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame(array_final)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.rename({0 :'X1', 1: 'X2', 2:'X3', 3:'X4', 4:'target'}, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      X1   X2   X3   X4  target\n",
      "0    5.1  3.5  1.4  0.2     0.0\n",
      "1    4.9  3.0  1.4  0.2     0.0\n",
      "2    4.7  3.2  1.3  0.2     0.0\n",
      "3    4.6  3.1  1.5  0.2     0.0\n",
      "4    5.0  3.6  1.4  0.2     0.0\n",
      "..   ...  ...  ...  ...     ...\n",
      "145  6.7  3.0  5.2  2.3     2.0\n",
      "146  6.3  2.5  5.0  1.9     2.0\n",
      "147  6.5  3.0  5.2  2.0     2.0\n",
      "148  6.2  3.4  5.4  2.3     2.0\n",
      "149  5.9  3.0  5.1  1.8     2.0\n",
      "\n",
      "[150 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 2:__ Usando o df criano no exercício 1, calcule qual a média da variável 'X2', para cada valor de target. Dica: Use a função groupby no dataframe df para resolver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>3.428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>2.770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <td>2.974</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           X2\n",
       "target       \n",
       "0.0     3.428\n",
       "1.0     2.770\n",
       "2.0     2.974"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('target').agg({\"X2\":'mean'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 3:__ Construa um dicionário mapeando os valores:\n",
    "        \n",
    "        0 - 'A'\n",
    "        \n",
    "        1 - 'B'\n",
    "        \n",
    "        2 - 'C'\n",
    "        \n",
    "Usando a função map, crie uma coluna nova no dataframe df chamada 'target_2' com o mapeamento feito. Dica: Use a função map como visto em aula."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: 'A', 1: 'B', 2: 'C'}\n"
     ]
    }
   ],
   "source": [
    "dicio = {0:'A', 1:'B', 2:'C'}\n",
    "print(dicio)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['target_2'] = 'NaN'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>target</th>\n",
       "      <th>target_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    X1   X2   X3   X4  target target_2\n",
       "0  5.1  3.5  1.4  0.2     0.0      NaN\n",
       "1  4.9  3.0  1.4  0.2     0.0      NaN\n",
       "2  4.7  3.2  1.3  0.2     0.0      NaN\n",
       "3  4.6  3.1  1.5  0.2     0.0      NaN\n",
       "4  5.0  3.6  1.4  0.2     0.0      NaN"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>target</th>\n",
       "      <th>target_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    X1   X2   X3   X4  target target_2\n",
       "0  5.1  3.5  1.4  0.2     0.0        A\n",
       "1  4.9  3.0  1.4  0.2     0.0        A\n",
       "2  4.7  3.2  1.3  0.2     0.0        A\n",
       "3  4.6  3.1  1.5  0.2     0.0        A\n",
       "4  5.0  3.6  1.4  0.2     0.0        A"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.target_2 = df.target.map(dicio)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 4:__ \n",
    "\n",
    "\n",
    "4.1: Filtre o dataframe df onde X1 é maior do que 6 __ou__ target é diferente de 2 e chame-o de df1. Dica: usar os filtros e os operadores vistos em aula;\n",
    "\n",
    "4.2: Filtre os primeiros 15 índices do dataframe df e chame-o de df2;\n",
    "\n",
    "4.3: Transformando os dataframes df1 e df2 para arrays. Multiplique df1 pelo transposto de df2 (use a função que calcula transposta de matriz) e printe o resultado final. Lembre-se de dropar a coluna target_2 de cada um dos dataframes antes de fazer a mutliplicação."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[(df.X1 > 6) | (df.target != 2)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      X1   X2   X3   X4  target target_2\n",
      "0    5.1  3.5  1.4  0.2     0.0        A\n",
      "1    4.9  3.0  1.4  0.2     0.0        A\n",
      "2    4.7  3.2  1.3  0.2     0.0        A\n",
      "3    4.6  3.1  1.5  0.2     0.0        A\n",
      "4    5.0  3.6  1.4  0.2     0.0        A\n",
      "..   ...  ...  ...  ...     ...      ...\n",
      "144  6.7  3.3  5.7  2.5     2.0        C\n",
      "145  6.7  3.0  5.2  2.3     2.0        C\n",
      "146  6.3  2.5  5.0  1.9     2.0        C\n",
      "147  6.5  3.0  5.2  2.0     2.0        C\n",
      "148  6.2  3.4  5.4  2.3     2.0        C\n",
      "\n",
      "[141 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>target</th>\n",
       "      <th>target_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    X1   X2   X3   X4  target target_2\n",
       "0  5.1  3.5  1.4  0.2     0.0        A\n",
       "1  4.9  3.0  1.4  0.2     0.0        A\n",
       "2  4.7  3.2  1.3  0.2     0.0        A\n",
       "3  4.6  3.1  1.5  0.2     0.0        A\n",
       "4  5.0  3.6  1.4  0.2     0.0        A"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>target</th>\n",
       "      <th>target_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.4</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4.4</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5.4</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4.8</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.8</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4.3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5.8</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5.7</td>\n",
       "      <td>4.4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     X1   X2   X3   X4  target target_2\n",
       "0   5.1  3.5  1.4  0.2     0.0        A\n",
       "1   4.9  3.0  1.4  0.2     0.0        A\n",
       "2   4.7  3.2  1.3  0.2     0.0        A\n",
       "3   4.6  3.1  1.5  0.2     0.0        A\n",
       "4   5.0  3.6  1.4  0.2     0.0        A\n",
       "5   5.4  3.9  1.7  0.4     0.0        A\n",
       "6   4.6  3.4  1.4  0.3     0.0        A\n",
       "7   5.0  3.4  1.5  0.2     0.0        A\n",
       "8   4.4  2.9  1.4  0.2     0.0        A\n",
       "9   4.9  3.1  1.5  0.1     0.0        A\n",
       "10  5.4  3.7  1.5  0.2     0.0        A\n",
       "11  4.8  3.4  1.6  0.2     0.0        A\n",
       "12  4.8  3.0  1.4  0.1     0.0        A\n",
       "13  4.3  3.0  1.1  0.1     0.0        A\n",
       "14  5.8  4.0  1.2  0.2     0.0        A\n",
       "15  5.7  4.4  1.5  0.4     0.0        A"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df1[:16]\n",
    "df2.head(16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>target</th>\n",
       "      <th>target_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    X1   X2   X3   X4  target target_2\n",
       "0  5.1  3.5  1.4  0.2     0.0        A\n",
       "1  4.9  3.0  1.4  0.2     0.0        A\n",
       "2  4.7  3.2  1.3  0.2     0.0        A\n",
       "3  4.6  3.1  1.5  0.2     0.0        A\n",
       "4  5.0  3.6  1.4  0.2     0.0        A"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.1, 3.5, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.0, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.7, 3.2, 1.3, 0.2, 0.0, 'A'],\n",
       "       [4.6, 3.1, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.6, 1.4, 0.2, 0.0, 'A'],\n",
       "       [5.4, 3.9, 1.7, 0.4, 0.0, 'A'],\n",
       "       [4.6, 3.4, 1.4, 0.3, 0.0, 'A'],\n",
       "       [5.0, 3.4, 1.5, 0.2, 0.0, 'A'],\n",
       "       [4.4, 2.9, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.1, 1.5, 0.1, 0.0, 'A'],\n",
       "       [5.4, 3.7, 1.5, 0.2, 0.0, 'A'],\n",
       "       [4.8, 3.4, 1.6, 0.2, 0.0, 'A'],\n",
       "       [4.8, 3.0, 1.4, 0.1, 0.0, 'A'],\n",
       "       [4.3, 3.0, 1.1, 0.1, 0.0, 'A'],\n",
       "       [5.8, 4.0, 1.2, 0.2, 0.0, 'A'],\n",
       "       [5.7, 4.4, 1.5, 0.4, 0.0, 'A'],\n",
       "       [5.4, 3.9, 1.3, 0.4, 0.0, 'A'],\n",
       "       [5.1, 3.5, 1.4, 0.3, 0.0, 'A'],\n",
       "       [5.7, 3.8, 1.7, 0.3, 0.0, 'A'],\n",
       "       [5.1, 3.8, 1.5, 0.3, 0.0, 'A'],\n",
       "       [5.4, 3.4, 1.7, 0.2, 0.0, 'A'],\n",
       "       [5.1, 3.7, 1.5, 0.4, 0.0, 'A'],\n",
       "       [4.6, 3.6, 1.0, 0.2, 0.0, 'A'],\n",
       "       [5.1, 3.3, 1.7, 0.5, 0.0, 'A'],\n",
       "       [4.8, 3.4, 1.9, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.0, 1.6, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.4, 1.6, 0.4, 0.0, 'A'],\n",
       "       [5.2, 3.5, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.2, 3.4, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.7, 3.2, 1.6, 0.2, 0.0, 'A'],\n",
       "       [4.8, 3.1, 1.6, 0.2, 0.0, 'A'],\n",
       "       [5.4, 3.4, 1.5, 0.4, 0.0, 'A'],\n",
       "       [5.2, 4.1, 1.5, 0.1, 0.0, 'A'],\n",
       "       [5.5, 4.2, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.1, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.2, 1.2, 0.2, 0.0, 'A'],\n",
       "       [5.5, 3.5, 1.3, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.6, 1.4, 0.1, 0.0, 'A'],\n",
       "       [4.4, 3.0, 1.3, 0.2, 0.0, 'A'],\n",
       "       [5.1, 3.4, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.5, 1.3, 0.3, 0.0, 'A'],\n",
       "       [4.5, 2.3, 1.3, 0.3, 0.0, 'A'],\n",
       "       [4.4, 3.2, 1.3, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.5, 1.6, 0.6, 0.0, 'A'],\n",
       "       [5.1, 3.8, 1.9, 0.4, 0.0, 'A'],\n",
       "       [4.8, 3.0, 1.4, 0.3, 0.0, 'A'],\n",
       "       [5.1, 3.8, 1.6, 0.2, 0.0, 'A'],\n",
       "       [4.6, 3.2, 1.4, 0.2, 0.0, 'A'],\n",
       "       [5.3, 3.7, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.3, 1.4, 0.2, 0.0, 'A'],\n",
       "       [7.0, 3.2, 4.7, 1.4, 1.0, 'B'],\n",
       "       [6.4, 3.2, 4.5, 1.5, 1.0, 'B'],\n",
       "       [6.9, 3.1, 4.9, 1.5, 1.0, 'B'],\n",
       "       [5.5, 2.3, 4.0, 1.3, 1.0, 'B'],\n",
       "       [6.5, 2.8, 4.6, 1.5, 1.0, 'B'],\n",
       "       [5.7, 2.8, 4.5, 1.3, 1.0, 'B'],\n",
       "       [6.3, 3.3, 4.7, 1.6, 1.0, 'B'],\n",
       "       [4.9, 2.4, 3.3, 1.0, 1.0, 'B'],\n",
       "       [6.6, 2.9, 4.6, 1.3, 1.0, 'B'],\n",
       "       [5.2, 2.7, 3.9, 1.4, 1.0, 'B'],\n",
       "       [5.0, 2.0, 3.5, 1.0, 1.0, 'B'],\n",
       "       [5.9, 3.0, 4.2, 1.5, 1.0, 'B'],\n",
       "       [6.0, 2.2, 4.0, 1.0, 1.0, 'B'],\n",
       "       [6.1, 2.9, 4.7, 1.4, 1.0, 'B'],\n",
       "       [5.6, 2.9, 3.6, 1.3, 1.0, 'B'],\n",
       "       [6.7, 3.1, 4.4, 1.4, 1.0, 'B'],\n",
       "       [5.6, 3.0, 4.5, 1.5, 1.0, 'B'],\n",
       "       [5.8, 2.7, 4.1, 1.0, 1.0, 'B'],\n",
       "       [6.2, 2.2, 4.5, 1.5, 1.0, 'B'],\n",
       "       [5.6, 2.5, 3.9, 1.1, 1.0, 'B'],\n",
       "       [5.9, 3.2, 4.8, 1.8, 1.0, 'B'],\n",
       "       [6.1, 2.8, 4.0, 1.3, 1.0, 'B'],\n",
       "       [6.3, 2.5, 4.9, 1.5, 1.0, 'B'],\n",
       "       [6.1, 2.8, 4.7, 1.2, 1.0, 'B'],\n",
       "       [6.4, 2.9, 4.3, 1.3, 1.0, 'B'],\n",
       "       [6.6, 3.0, 4.4, 1.4, 1.0, 'B'],\n",
       "       [6.8, 2.8, 4.8, 1.4, 1.0, 'B'],\n",
       "       [6.7, 3.0, 5.0, 1.7, 1.0, 'B'],\n",
       "       [6.0, 2.9, 4.5, 1.5, 1.0, 'B'],\n",
       "       [5.7, 2.6, 3.5, 1.0, 1.0, 'B'],\n",
       "       [5.5, 2.4, 3.8, 1.1, 1.0, 'B'],\n",
       "       [5.5, 2.4, 3.7, 1.0, 1.0, 'B'],\n",
       "       [5.8, 2.7, 3.9, 1.2, 1.0, 'B'],\n",
       "       [6.0, 2.7, 5.1, 1.6, 1.0, 'B'],\n",
       "       [5.4, 3.0, 4.5, 1.5, 1.0, 'B'],\n",
       "       [6.0, 3.4, 4.5, 1.6, 1.0, 'B'],\n",
       "       [6.7, 3.1, 4.7, 1.5, 1.0, 'B'],\n",
       "       [6.3, 2.3, 4.4, 1.3, 1.0, 'B'],\n",
       "       [5.6, 3.0, 4.1, 1.3, 1.0, 'B'],\n",
       "       [5.5, 2.5, 4.0, 1.3, 1.0, 'B'],\n",
       "       [5.5, 2.6, 4.4, 1.2, 1.0, 'B'],\n",
       "       [6.1, 3.0, 4.6, 1.4, 1.0, 'B'],\n",
       "       [5.8, 2.6, 4.0, 1.2, 1.0, 'B'],\n",
       "       [5.0, 2.3, 3.3, 1.0, 1.0, 'B'],\n",
       "       [5.6, 2.7, 4.2, 1.3, 1.0, 'B'],\n",
       "       [5.7, 3.0, 4.2, 1.2, 1.0, 'B'],\n",
       "       [5.7, 2.9, 4.2, 1.3, 1.0, 'B'],\n",
       "       [6.2, 2.9, 4.3, 1.3, 1.0, 'B'],\n",
       "       [5.1, 2.5, 3.0, 1.1, 1.0, 'B'],\n",
       "       [5.7, 2.8, 4.1, 1.3, 1.0, 'B'],\n",
       "       [6.3, 3.3, 6.0, 2.5, 2.0, 'C'],\n",
       "       [7.1, 3.0, 5.9, 2.1, 2.0, 'C'],\n",
       "       [6.3, 2.9, 5.6, 1.8, 2.0, 'C'],\n",
       "       [6.5, 3.0, 5.8, 2.2, 2.0, 'C'],\n",
       "       [7.6, 3.0, 6.6, 2.1, 2.0, 'C'],\n",
       "       [7.3, 2.9, 6.3, 1.8, 2.0, 'C'],\n",
       "       [6.7, 2.5, 5.8, 1.8, 2.0, 'C'],\n",
       "       [7.2, 3.6, 6.1, 2.5, 2.0, 'C'],\n",
       "       [6.5, 3.2, 5.1, 2.0, 2.0, 'C'],\n",
       "       [6.4, 2.7, 5.3, 1.9, 2.0, 'C'],\n",
       "       [6.8, 3.0, 5.5, 2.1, 2.0, 'C'],\n",
       "       [6.4, 3.2, 5.3, 2.3, 2.0, 'C'],\n",
       "       [6.5, 3.0, 5.5, 1.8, 2.0, 'C'],\n",
       "       [7.7, 3.8, 6.7, 2.2, 2.0, 'C'],\n",
       "       [7.7, 2.6, 6.9, 2.3, 2.0, 'C'],\n",
       "       [6.9, 3.2, 5.7, 2.3, 2.0, 'C'],\n",
       "       [7.7, 2.8, 6.7, 2.0, 2.0, 'C'],\n",
       "       [6.3, 2.7, 4.9, 1.8, 2.0, 'C'],\n",
       "       [6.7, 3.3, 5.7, 2.1, 2.0, 'C'],\n",
       "       [7.2, 3.2, 6.0, 1.8, 2.0, 'C'],\n",
       "       [6.2, 2.8, 4.8, 1.8, 2.0, 'C'],\n",
       "       [6.1, 3.0, 4.9, 1.8, 2.0, 'C'],\n",
       "       [6.4, 2.8, 5.6, 2.1, 2.0, 'C'],\n",
       "       [7.2, 3.0, 5.8, 1.6, 2.0, 'C'],\n",
       "       [7.4, 2.8, 6.1, 1.9, 2.0, 'C'],\n",
       "       [7.9, 3.8, 6.4, 2.0, 2.0, 'C'],\n",
       "       [6.4, 2.8, 5.6, 2.2, 2.0, 'C'],\n",
       "       [6.3, 2.8, 5.1, 1.5, 2.0, 'C'],\n",
       "       [6.1, 2.6, 5.6, 1.4, 2.0, 'C'],\n",
       "       [7.7, 3.0, 6.1, 2.3, 2.0, 'C'],\n",
       "       [6.3, 3.4, 5.6, 2.4, 2.0, 'C'],\n",
       "       [6.4, 3.1, 5.5, 1.8, 2.0, 'C'],\n",
       "       [6.9, 3.1, 5.4, 2.1, 2.0, 'C'],\n",
       "       [6.7, 3.1, 5.6, 2.4, 2.0, 'C'],\n",
       "       [6.9, 3.1, 5.1, 2.3, 2.0, 'C'],\n",
       "       [6.8, 3.2, 5.9, 2.3, 2.0, 'C'],\n",
       "       [6.7, 3.3, 5.7, 2.5, 2.0, 'C'],\n",
       "       [6.7, 3.0, 5.2, 2.3, 2.0, 'C'],\n",
       "       [6.3, 2.5, 5.0, 1.9, 2.0, 'C'],\n",
       "       [6.5, 3.0, 5.2, 2.0, 2.0, 'C'],\n",
       "       [6.2, 3.4, 5.4, 2.3, 2.0, 'C']], dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "np1_array = df1.to_numpy()\n",
    "\n",
    "display(np1_array)\n",
    "\n",
    "print(type(np1_array))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.1 3.5 1.4 0.2 0.0]\n",
      " [4.9 3.0 1.4 0.2 0.0]\n",
      " [4.7 3.2 1.3 0.2 0.0]\n",
      " [4.6 3.1 1.5 0.2 0.0]\n",
      " [5.0 3.6 1.4 0.2 0.0]\n",
      " [5.4 3.9 1.7 0.4 0.0]\n",
      " [4.6 3.4 1.4 0.3 0.0]\n",
      " [5.0 3.4 1.5 0.2 0.0]\n",
      " [4.4 2.9 1.4 0.2 0.0]\n",
      " [4.9 3.1 1.5 0.1 0.0]\n",
      " [5.4 3.7 1.5 0.2 0.0]\n",
      " [4.8 3.4 1.6 0.2 0.0]\n",
      " [4.8 3.0 1.4 0.1 0.0]\n",
      " [4.3 3.0 1.1 0.1 0.0]\n",
      " [5.8 4.0 1.2 0.2 0.0]\n",
      " [5.7 4.4 1.5 0.4 0.0]\n",
      " [5.4 3.9 1.3 0.4 0.0]\n",
      " [5.1 3.5 1.4 0.3 0.0]\n",
      " [5.7 3.8 1.7 0.3 0.0]\n",
      " [5.1 3.8 1.5 0.3 0.0]\n",
      " [5.4 3.4 1.7 0.2 0.0]\n",
      " [5.1 3.7 1.5 0.4 0.0]\n",
      " [4.6 3.6 1.0 0.2 0.0]\n",
      " [5.1 3.3 1.7 0.5 0.0]\n",
      " [4.8 3.4 1.9 0.2 0.0]\n",
      " [5.0 3.0 1.6 0.2 0.0]\n",
      " [5.0 3.4 1.6 0.4 0.0]\n",
      " [5.2 3.5 1.5 0.2 0.0]\n",
      " [5.2 3.4 1.4 0.2 0.0]\n",
      " [4.7 3.2 1.6 0.2 0.0]\n",
      " [4.8 3.1 1.6 0.2 0.0]\n",
      " [5.4 3.4 1.5 0.4 0.0]\n",
      " [5.2 4.1 1.5 0.1 0.0]\n",
      " [5.5 4.2 1.4 0.2 0.0]\n",
      " [4.9 3.1 1.5 0.2 0.0]\n",
      " [5.0 3.2 1.2 0.2 0.0]\n",
      " [5.5 3.5 1.3 0.2 0.0]\n",
      " [4.9 3.6 1.4 0.1 0.0]\n",
      " [4.4 3.0 1.3 0.2 0.0]\n",
      " [5.1 3.4 1.5 0.2 0.0]\n",
      " [5.0 3.5 1.3 0.3 0.0]\n",
      " [4.5 2.3 1.3 0.3 0.0]\n",
      " [4.4 3.2 1.3 0.2 0.0]\n",
      " [5.0 3.5 1.6 0.6 0.0]\n",
      " [5.1 3.8 1.9 0.4 0.0]\n",
      " [4.8 3.0 1.4 0.3 0.0]\n",
      " [5.1 3.8 1.6 0.2 0.0]\n",
      " [4.6 3.2 1.4 0.2 0.0]\n",
      " [5.3 3.7 1.5 0.2 0.0]\n",
      " [5.0 3.3 1.4 0.2 0.0]\n",
      " [7.0 3.2 4.7 1.4 1.0]\n",
      " [6.4 3.2 4.5 1.5 1.0]\n",
      " [6.9 3.1 4.9 1.5 1.0]\n",
      " [5.5 2.3 4.0 1.3 1.0]\n",
      " [6.5 2.8 4.6 1.5 1.0]\n",
      " [5.7 2.8 4.5 1.3 1.0]\n",
      " [6.3 3.3 4.7 1.6 1.0]\n",
      " [4.9 2.4 3.3 1.0 1.0]\n",
      " [6.6 2.9 4.6 1.3 1.0]\n",
      " [5.2 2.7 3.9 1.4 1.0]\n",
      " [5.0 2.0 3.5 1.0 1.0]\n",
      " [5.9 3.0 4.2 1.5 1.0]\n",
      " [6.0 2.2 4.0 1.0 1.0]\n",
      " [6.1 2.9 4.7 1.4 1.0]\n",
      " [5.6 2.9 3.6 1.3 1.0]\n",
      " [6.7 3.1 4.4 1.4 1.0]\n",
      " [5.6 3.0 4.5 1.5 1.0]\n",
      " [5.8 2.7 4.1 1.0 1.0]\n",
      " [6.2 2.2 4.5 1.5 1.0]\n",
      " [5.6 2.5 3.9 1.1 1.0]\n",
      " [5.9 3.2 4.8 1.8 1.0]\n",
      " [6.1 2.8 4.0 1.3 1.0]\n",
      " [6.3 2.5 4.9 1.5 1.0]\n",
      " [6.1 2.8 4.7 1.2 1.0]\n",
      " [6.4 2.9 4.3 1.3 1.0]\n",
      " [6.6 3.0 4.4 1.4 1.0]\n",
      " [6.8 2.8 4.8 1.4 1.0]\n",
      " [6.7 3.0 5.0 1.7 1.0]\n",
      " [6.0 2.9 4.5 1.5 1.0]\n",
      " [5.7 2.6 3.5 1.0 1.0]\n",
      " [5.5 2.4 3.8 1.1 1.0]\n",
      " [5.5 2.4 3.7 1.0 1.0]\n",
      " [5.8 2.7 3.9 1.2 1.0]\n",
      " [6.0 2.7 5.1 1.6 1.0]\n",
      " [5.4 3.0 4.5 1.5 1.0]\n",
      " [6.0 3.4 4.5 1.6 1.0]\n",
      " [6.7 3.1 4.7 1.5 1.0]\n",
      " [6.3 2.3 4.4 1.3 1.0]\n",
      " [5.6 3.0 4.1 1.3 1.0]\n",
      " [5.5 2.5 4.0 1.3 1.0]\n",
      " [5.5 2.6 4.4 1.2 1.0]\n",
      " [6.1 3.0 4.6 1.4 1.0]\n",
      " [5.8 2.6 4.0 1.2 1.0]\n",
      " [5.0 2.3 3.3 1.0 1.0]\n",
      " [5.6 2.7 4.2 1.3 1.0]\n",
      " [5.7 3.0 4.2 1.2 1.0]\n",
      " [5.7 2.9 4.2 1.3 1.0]\n",
      " [6.2 2.9 4.3 1.3 1.0]\n",
      " [5.1 2.5 3.0 1.1 1.0]\n",
      " [5.7 2.8 4.1 1.3 1.0]\n",
      " [6.3 3.3 6.0 2.5 2.0]\n",
      " [7.1 3.0 5.9 2.1 2.0]\n",
      " [6.3 2.9 5.6 1.8 2.0]\n",
      " [6.5 3.0 5.8 2.2 2.0]\n",
      " [7.6 3.0 6.6 2.1 2.0]\n",
      " [7.3 2.9 6.3 1.8 2.0]\n",
      " [6.7 2.5 5.8 1.8 2.0]\n",
      " [7.2 3.6 6.1 2.5 2.0]\n",
      " [6.5 3.2 5.1 2.0 2.0]\n",
      " [6.4 2.7 5.3 1.9 2.0]\n",
      " [6.8 3.0 5.5 2.1 2.0]\n",
      " [6.4 3.2 5.3 2.3 2.0]\n",
      " [6.5 3.0 5.5 1.8 2.0]\n",
      " [7.7 3.8 6.7 2.2 2.0]\n",
      " [7.7 2.6 6.9 2.3 2.0]\n",
      " [6.9 3.2 5.7 2.3 2.0]\n",
      " [7.7 2.8 6.7 2.0 2.0]\n",
      " [6.3 2.7 4.9 1.8 2.0]\n",
      " [6.7 3.3 5.7 2.1 2.0]\n",
      " [7.2 3.2 6.0 1.8 2.0]\n",
      " [6.2 2.8 4.8 1.8 2.0]\n",
      " [6.1 3.0 4.9 1.8 2.0]\n",
      " [6.4 2.8 5.6 2.1 2.0]\n",
      " [7.2 3.0 5.8 1.6 2.0]\n",
      " [7.4 2.8 6.1 1.9 2.0]\n",
      " [7.9 3.8 6.4 2.0 2.0]\n",
      " [6.4 2.8 5.6 2.2 2.0]\n",
      " [6.3 2.8 5.1 1.5 2.0]\n",
      " [6.1 2.6 5.6 1.4 2.0]\n",
      " [7.7 3.0 6.1 2.3 2.0]\n",
      " [6.3 3.4 5.6 2.4 2.0]\n",
      " [6.4 3.1 5.5 1.8 2.0]\n",
      " [6.9 3.1 5.4 2.1 2.0]\n",
      " [6.7 3.1 5.6 2.4 2.0]\n",
      " [6.9 3.1 5.1 2.3 2.0]\n",
      " [6.8 3.2 5.9 2.3 2.0]\n",
      " [6.7 3.3 5.7 2.5 2.0]\n",
      " [6.7 3.0 5.2 2.3 2.0]\n",
      " [6.3 2.5 5.0 1.9 2.0]\n",
      " [6.5 3.0 5.2 2.0 2.0]\n",
      " [6.2 3.4 5.4 2.3 2.0]]\n"
     ]
    }
   ],
   "source": [
    "df1_limpo = np1_array[:, :5]\n",
    "print(df1_limpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.1, 3.5, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.0, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.7, 3.2, 1.3, 0.2, 0.0, 'A'],\n",
       "       [4.6, 3.1, 1.5, 0.2, 0.0, 'A'],\n",
       "       [5.0, 3.6, 1.4, 0.2, 0.0, 'A'],\n",
       "       [5.4, 3.9, 1.7, 0.4, 0.0, 'A'],\n",
       "       [4.6, 3.4, 1.4, 0.3, 0.0, 'A'],\n",
       "       [5.0, 3.4, 1.5, 0.2, 0.0, 'A'],\n",
       "       [4.4, 2.9, 1.4, 0.2, 0.0, 'A'],\n",
       "       [4.9, 3.1, 1.5, 0.1, 0.0, 'A'],\n",
       "       [5.4, 3.7, 1.5, 0.2, 0.0, 'A'],\n",
       "       [4.8, 3.4, 1.6, 0.2, 0.0, 'A'],\n",
       "       [4.8, 3.0, 1.4, 0.1, 0.0, 'A'],\n",
       "       [4.3, 3.0, 1.1, 0.1, 0.0, 'A'],\n",
       "       [5.8, 4.0, 1.2, 0.2, 0.0, 'A'],\n",
       "       [5.7, 4.4, 1.5, 0.4, 0.0, 'A']], dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "np2_array = df2.to_numpy()\n",
    "\n",
    "display(np2_array)\n",
    "\n",
    "print(type(np2_array))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.1 3.5 1.4 0.2 0.0]\n",
      " [4.9 3.0 1.4 0.2 0.0]\n",
      " [4.7 3.2 1.3 0.2 0.0]\n",
      " [4.6 3.1 1.5 0.2 0.0]\n",
      " [5.0 3.6 1.4 0.2 0.0]\n",
      " [5.4 3.9 1.7 0.4 0.0]\n",
      " [4.6 3.4 1.4 0.3 0.0]\n",
      " [5.0 3.4 1.5 0.2 0.0]\n",
      " [4.4 2.9 1.4 0.2 0.0]\n",
      " [4.9 3.1 1.5 0.1 0.0]\n",
      " [5.4 3.7 1.5 0.2 0.0]\n",
      " [4.8 3.4 1.6 0.2 0.0]\n",
      " [4.8 3.0 1.4 0.1 0.0]\n",
      " [4.3 3.0 1.1 0.1 0.0]\n",
      " [5.8 4.0 1.2 0.2 0.0]\n",
      " [5.7 4.4 1.5 0.4 0.0]]\n"
     ]
    }
   ],
   "source": [
    "df2_limpo = np2_array[:, :5]\n",
    "print(df2_limpo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.8, 4.8,\n",
       "        4.3, 5.8, 5.7],\n",
       "       [3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3.0,\n",
       "        3.0, 4.0, 4.4],\n",
       "       [1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4,\n",
       "        1.1, 1.2, 1.5],\n",
       "       [0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1,\n",
       "        0.1, 0.2, 0.4],\n",
       "       [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n",
       "        0.0, 0.0, 0.0]], dtype=object)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_limpo.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[40.26 37.489999999999995 37.03 ... 33.989999999999995 45.3 46.65]\n",
      " [37.489999999999995 35.010000000000005 34.49 ... 31.63 42.14 43.31]\n",
      " [37.03 34.49 34.06 ... 31.26 41.660000000000004 42.900000000000006]\n",
      " ...\n",
      " [48.26 45.75000000000001 44.49 ... 40.28 52.92 55.169999999999995]\n",
      " [51.33 48.53 47.31 ... 42.870000000000005 56.339999999999996\n",
      "  58.85000000000001]\n",
      " [51.54 48.6 47.50000000000001 ... 43.029999999999994 56.50000000000001\n",
      "  59.32000000000001]]\n"
     ]
    }
   ],
   "source": [
    "multi_df1_df2 = np.dot(df1_limpo, df2_limpo.T)\n",
    "\n",
    "print(multi_df1_df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 5:__ \n",
    "    \n",
    "5.1: Crie uma função que receba um  número inteiro positivo N e retorne um array 0, 1, ..., N. Dica: Use as funções que vimos para criação de arrays;\n",
    "    \n",
    "5.2: Crie uma função que receba um array [0,1, .., N] e retorne o mesmo array, só que com os números em posições aleatórias. Dica: use a função que vimos em aula que faz escolhas aleatórias SEM reposição;\n",
    "\n",
    "5.3: Crie uma função que receba um número inteiro positivo N. Essa função deve retornar um array de tamanho N, cujos valores são números inteiros entre 0 e N-1 e pode haver repetição desses números."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-30-2b63f62ae008>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-30-2b63f62ae008>\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    except Exception:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "def array_formado(n):\n",
    "    while True:\n",
    "        try:\n",
    "            if n <= 0:\n",
    "        except Exception:\n",
    "            print('Valor inválido. Tente novamente.')\n",
    "        else:\n",
    "            array_formado = np.arange (0, n, 1)\n",
    "            print ('O array formado é:')\n",
    "            return(array_formado)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def array_embaralhado(n):\n",
    "    while True:\n",
    "        try:\n",
    "            if n <= 0:\n",
    "        except Exception:\n",
    "            print('Valor inválido. Tente novamente.')\n",
    "        else:\n",
    "            array_recebido = np.random.randint (0, 100, size=n)\n",
    "            print(f'O array recebido é: {array_recebido}.')\n",
    "            array_embaralhado = np.random.sample(array_recebido)\n",
    "            print('O array formado é:')\n",
    "            return(array_embaralhado)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def array_tamanhodefinido(n):\n",
    "    while True:\n",
    "        try:\n",
    "            if n <= 0:\n",
    "        except Exception:\n",
    "            print('Valor inválido. Tente novamente.')\n",
    "        else:\n",
    "            array_formado = np.random.choice (0, num-1, size = n)\n",
    "            print(f'O array formado é: ')\n",
    "            return array_formado \n",
    "                 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Exercício 6:__ Construa uma função divide_dados:\n",
    "        \n",
    "        - recebe um array X de dimensões quaisquer (n,k) e um parâmetro p entre 0 e 1.\n",
    "        - divide o array X em duas partes disjuntas de forma aleatória. Ou seja, crie dois novos arrays, X1 e X2,\n",
    "        onde a dimensão de linhas de X1 somada com a dimensão de linhas de X2 deve ser igual a dimensão de linhas de X.\n",
    "        - interpretando p como percentual, o tamanho de X1 deve ser p*100% do número de linhas de X; enquanto X2 deve ser o resto.\n",
    "        - retorne esses dois arrays.\n",
    "        \n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def divide_dados (n,k,p):\n",
    "    mat = linha = []\n",
    "    for i in range(0, n, 1):\n",
    "        for j in range(0, k, 1):\n",
    "            elementos = random.randint(0,100)\n",
    "            linha.append(elementos)\n",
    "            mat.append(linha)\n",
    "\n",
    "    X = np.array(mat)\n",
    "    print(f'Array X: {X}.')\n",
    "\n",
    "    y=np.array_split(X,2)\n",
    "    X1 = y[0]\n",
    "    X2 = y[1]\n",
    "\n",
    "    print(f'Array X1: {X1}.')\n",
    "    print(f'Array X2: {X2}.')\n",
    "\n",
    "    x1 = X1.ndim\n",
    "    x2 = X2.ndim\n",
    "\n",
    "    print(f'Tamanho X1: {x1}')\n",
    "    print(f'Tamanho X2: {x2}')\n",
    "\n",
    "    array_x1 = np.random.normal(loc = 0, scale = 1, size = x1)\n",
    "    array_x2 = np.random.normal(loc = 0, scale = 1, size = x2)\n",
    "    \n",
    "return (array_x1, array_x2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
